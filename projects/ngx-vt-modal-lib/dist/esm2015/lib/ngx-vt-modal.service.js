import { EventEmitter, Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { NgxVtModalTemplateComponent } from './modal-template/ngx-vt-modal-template.component';
import { NgxVtModalCloseStatus } from './model/ngx-vt-modal-close-status';
import * as i0 from "@angular/core";
export class NgxVtModalService {
    constructor(document, componentFactoryResolver, appRef, injector, rendererFactory) {
        this.document = document;
        this.componentFactoryResolver = componentFactoryResolver;
        this.appRef = appRef;
        this.injector = injector;
        this.rendererFactory = rendererFactory;
        this.modals = [];
        this.MODAL_BODY_SELECTOR = 'div#ngx-vt-modal-body';
        this.DEFAULT_BACKGROUND_COLOR = '#00000066';
        this.renderer = rendererFactory.createRenderer(null, null);
    }
    open(component, options) {
        this.createBackdrop();
        const host = this.createHost(options);
        const modalRef = this.componentFactoryResolver.resolveComponentFactory(NgxVtModalTemplateComponent).create(this.injector);
        modalRef.instance.options = Object.assign({}, options);
        const componentRef = this.componentFactoryResolver.resolveComponentFactory(component).create(this.injector);
        componentRef.instance.data = Object.assign({}, options === null || options === void 0 ? void 0 : options.data);
        componentRef.instance.closeModal$ = new EventEmitter();
        const domNodeModal = modalRef.hostView.rootNodes[0];
        const modalBody = domNodeModal.querySelector(this.MODAL_BODY_SELECTOR);
        const domNodeComponent = componentRef.hostView.rootNodes[0];
        if (options === null || options === void 0 ? void 0 : options.class) {
            this.renderer.addClass(domNodeModal, options.class);
        }
        modalBody.append(domNodeComponent);
        host.append(domNodeModal);
        this.modals.push({ modal: modalRef, component: componentRef, host });
        this.appRef.attachView(modalRef.hostView);
        this.appRef.attachView(componentRef.hostView);
        this.renderer.appendChild(this.backdrop, host);
        return componentRef.instance;
    }
    close(data) {
        var _a;
        if (!((_a = this.modals) === null || _a === void 0 ? void 0 : _a.length)) {
            return;
        }
        const removedModal = this.modals.pop();
        this.appRef.detachView(removedModal.component.hostView);
        removedModal.component.instance.closeModal$.next(data);
        removedModal.component.destroy();
        this.appRef.detachView(removedModal.modal.hostView);
        removedModal.modal.destroy();
        this.renderer.removeChild(this.backdrop, removedModal.host);
        if (!this.modals.length) {
            this.renderer.removeChild(this.document.body, this.backdrop);
            this.backdrop = null;
        }
    }
    createHost(options) {
        const host = this.renderer.createElement('div');
        this.renderer.setStyle(host, 'zIndex', `${this.maxZIndex() + 1}`);
        this.renderer.addClass(host, 'ngx-vt-modal-host');
        this.renderer.setStyle(host, 'position', 'fixed');
        this.renderer.setStyle(host, 'width', '100%');
        this.renderer.setStyle(host, 'height', '100%');
        if (options === null || options === void 0 ? void 0 : options.closeOnBackdropClick) {
            this.renderer.listen(this.backdrop, 'click', (event) => {
                if (host == event.target) {
                    this.close({ dismiss: NgxVtModalCloseStatus.BACKDROP });
                }
            });
        }
        return host;
    }
    createBackdrop() {
        if (!this.backdrop) {
            this.backdrop = this.renderer.createElement('div');
            this.renderer.setStyle(this.backdrop, 'zIndex', `${this.maxZIndex() + 1}`);
            this.renderer.addClass(this.backdrop, 'ngx-vt-modal-backdrop');
            this.renderer.setStyle(this.backdrop, 'position', 'fixed');
            this.renderer.setStyle(this.backdrop, 'top', 0);
            this.renderer.setStyle(this.backdrop, 'left', 0);
            this.renderer.setStyle(this.backdrop, 'width', '100%');
            this.renderer.setStyle(this.backdrop, 'height', '100%');
            // check if global css has rule for backdrop background
            // add to style.css rule :
            // :root {
            //   --ngx-vt-modal-backdrop-background : yourColor;
            // }
            const background = getComputedStyle(document.documentElement)
                .getPropertyValue('--ngx-vt-modal-backdrop-background') || this.DEFAULT_BACKGROUND_COLOR;
            this.renderer.setStyle(this.backdrop, 'backgroundColor', background);
            const appRoot = this.document.body;
            this.renderer.appendChild(appRoot, this.backdrop);
        }
    }
    maxZIndex() {
        return Math.max(...Array.from(document.getElementsByTagName('div'), el => {
            const style = getComputedStyle(el);
            return style.position !== 'static' && +style.zIndex > 0 && +style.zIndex;
        }), 0);
    }
}
NgxVtModalService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgxVtModalService, deps: [{ token: DOCUMENT }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.RendererFactory2 }], target: i0.ɵɵFactoryTarget.Injectable });
NgxVtModalService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgxVtModalService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: NgxVtModalService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.RendererFactory2 }]; } });
//# sourceMappingURL=data:application/json;base64,